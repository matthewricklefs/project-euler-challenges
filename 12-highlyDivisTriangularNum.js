/*
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:
    1: 1
    3: 1,3
    6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
*/

// remember factors and numbers:
// if you divide number by the factor
// there will be a remainder of 0

let divisibleTriangleNumber = (n) => {
  // generate  triangular numbers
  let currentTriangular = 0;
  // keeps track of the number of triangular numbers generated
  let count = 0;

  while (true) {
    // increase count by 1 for every iteration
    count = count + 1;
    // generating our triangular numbers
    currentTriangular = currentTriangular + count;

    // variable to count number of divisors
    let divisorCount = 0;

    for (let i = 1; i < Math.sqrt(currentTriangular); i++) {
      // check remainder, if zero we have found a factor
      if (currentTriangular % i === 0) {
        // 2 represents number both above and below the sqrt.
        divisorCount += 2;
      }
    }

    // if sqrt is a whole number it is indeed a factor
    // so increase the divisor count by 1
    if (Number.isInteger(Math.sqrt(currentTriangular))) {
      divisorCount += 1;
    }

    console.log(
      'general triangular ' +
        currentTriangular +
        ' with ' +
        divisorCount +
        ' divisor.'
    );

    if (divisorCount > n) {
      return currentTriangular;
    }
  }
};

console.log('Result is: ' + divisibleTriangleNumber(23));
console.log('Result is: ' + divisibleTriangleNumber(167));
